#!/bin/sh

# Network UPS Tools (NUT) systemd-shutdown integration handler.
#
# NOTE: This script requires both nut-server package (or more specifically,
# the drivers for your device, which may be in further packages grouped
# by media/protocol and third-party dependencies), nut-client (upsmon),
# and their configuration files to be present locally and on still-mounted
# filesystems (may be read-only).
#
# Copyright (C) 2011-2023 by NUT contirbutors
# Michal Hlavinka, Laurent Bigonville, Arnaud Quette, Jim Klimov et al.
#
# See https://networkupstools.org/
# and https://github.com/networkupstools/nut/
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

POWEROFF_QUIET="`/bin/sed -ne 's#^ *POWEROFF_QUIET= *\(.*\)$#\1#p' @CONFPATH@/nut.conf`" \
&& [ x"${POWEROFF_QUIET-}" = xtrue ] \
|| POWEROFF_QUIET="false"

[ -x "@SBINDIR@/upsmon" ] && [ -x "@SBINDIR@/upsdrvctl" ] || {
    $POWEROFF_QUIET || echo "$0: SKIP: could not locate '@SBINDIR@/upsmon' and/or '@SBINDIR@/upsdrvctl'" >&2
    exit 1
}

if @SBINDIR@/upsmon -K >/dev/null 2>&1; then
    # The argument may be anything compatible with /bin/sleep
    # (on OSes with systemd - assuming GNU coreutils or compatible,
    # so not necessarily a non-negative integer)
    wait_delay="`/bin/sed -ne 's#^ *POWEROFF_WAIT= *\(.*\)$#\1#p' @CONFPATH@/nut.conf`" || wait_delay=""

    $POWEROFF_QUIET || echo "$0: Commanding UPSes (if any) to shutdown" >&2
    @SBINDIR@/upsdrvctl shutdown

    if [ -n "$wait_delay" ] ; then
        # Avoid the power-race condition (if wall power returned
        # while we were shutting down, so some UPSes would not
        # shutdown and/or powercycle the load as commanded above).
        # Sleep "long enough" to drain the battery if the UPS is
        # in fact on battery, or reboot if it became alive, so
        # this computer is not in limbo forever.
        $POWEROFF_QUIET || echo "$0: Power-race avoidance: sleeping $wait_delay" >&2

        /bin/sleep $wait_delay

        $POWEROFF_QUIET || echo "$0: Power-race avoidance: sleep finished, rebooting..." >&2

        # We need to pass --force twice here to bypass systemd
        # and execute the reboot directly ourself.
        /bin/systemctl reboot --force --force
    else
        $POWEROFF_QUIET || echo "$0: Power-race avoidance: POWEROFF_WAIT is not configured at this time, proceeding to shutdown" >&2
    fi
else
    $POWEROFF_QUIET || echo "$0: SKIP: Not in FSD (killpower) mode at this time" >&2
fi

exit 0
