NUT and MS Windows
==================

Introduction
------------

NUT is now also available for the Microsoft Windows platform.

This methodology (and Windows support in general) are currently experimental,
so pull requests are welcome to tie up some loose ends (add more prerequisites,
test and fix programs, re-enable some code just commented away by ifdefs...)

NOTE: It is possible to prepare a Windows machine with tools and prerequisites
for building NUT natively, as detailed in `docs/config-prereqs.txt` and easily
handled by NUT common `ci_build.sh` script. Possibly, the instructions below
would converge there over time to keep it simple.

For additional reference about prerequisite preparation and further ideas for
the NUT for Windows effort, please see detailed report in the mailing list:

* https://alioth-lists.debian.net/pipermail/nut-upsdev/2016-April/007171.html -
  [Nut-upsdev] How to build NUT Windows Port

* https://alioth-lists.debian.net/pipermail/nut-upsdev/2016-April/007172.html -
  [Nut-upsdev] NUT Windows port sources review


Cross compiling from Linux
--------------------------

Fortunately, you are not forced to have a real Windows system to compile NUT.
The following chapters will guide you through setting up up a
link:http://mingw-w64.sourceforge.net[MinGW-w64] build environment and
compiling NUT.

NOTE: These instructions were re-verified (and codebase slightly amended)
with an Ubuntu 21.10 container as the dedicated build environment.
Support was added to NUT common `ci_build.sh` script to call the helper
`build-mingw-nut.sh` from this directory when cross-building on Linux
for Windows in the specially crafted sandbox (conformance is assumed),
if you use one of `BUILD_TYPE=cross-windows-mingw(-64|-32|)` as this
made NUT CI farm integration easier.

Beside MinGW detailed below, you would need the usual dependencies to
configure and build NUT (if you would bootstrap it from github sources
rather than a tarball -- without a pre-generated `configure` script).
Notably, `asciidoc` with its many dependencies may be required for
generation of man pages into the intermediate tarball used by script
referenced below.

MinGW-w64 build environment
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You will first need to setup a MinGW-w64 build environment.

On Debian/Ubuntu and similar systems, use:

	# apt-get update
	# apt-get install mingw-w64

On Redhat and similar systems, use:

	# ???

You will also need pthread and mingw regex libraries, and other recommended
dependencies as detailed below.

[NOTE]
================================================================================

If you use script `./build-mingw-nut.sh` mentioned below, you may skip setting
these environment variables when building NUT. You would however need to use
them once (per `ARCH`) to provide the prerequisites below if built from source.

When using the compilation approach, use the following HOST_FLAG, BUILD_FLAG
and CC, CFLAGS, LDFLAGS and PREFIX:

- prefer either
  to export ARCH="x86_64-w64-mingw32"
  or export ARCH="i686-w64-mingw32"
  (it can help to open two terminals and copy one ARCH into each
  and then the lines below into both of them; be sure to use separate
  directory trees for the unpacked build workspaces)
- export HOST_FLAG="--host=$ARCH"
- PREFIX=/usr/$ARCH

- BUILD_FLAG="--build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE`"

  * Note that this bit is very Debian specific!
    Hints for Redhat-style systems are wanted.

- also export the following compilation flags:

	export CFLAGS="$CFLAGS -D_POSIX=1 -I/usr/$ARCH/include/"
	export CXXFLAGS="$CXXFLAGS -D_POSIX=1 -I/usr/$ARCH/include/"
	export LDFLAGS="$LDFLAGS -L/usr/$ARCH/lib/"

================================================================================


pthread library
^^^^^^^^^^^^^^^

NOTE: The MinGW distribution in Ubuntu 21.10 already includes pthread files.

On older Debian systems, you can use the following packages repository:

	link:https://launchpad.net/~mingw-packages/+archive/ppa[MinGW PPA]

However at the moment this PPA seems to be stale and serve very old packages,
so it could be better to roll your own as detailed below.

On Redhat: FIXME

////////////////////////////////////////////////////////////////////////////////
http://fedoraproject.org/wiki/MinGW/CrossCompilerFramework
https://fedoraproject.org/wiki/Packaging:MinGW?rd=Packaging:MinGW_Future
https://fedoraproject.org/wiki/Packaging:MinGW_Old
////////////////////////////////////////////////////////////////////////////////

You can also compile it using:

	$ wget http://mirrors.kernel.org/sources.redhat.com/pthreads-win32/pthreads-w32-2-8-0-release.tar.gz
	$ tar xzf pthreads-w32-2-8-0-release.tar.gz
	$ cd pthreads-w32-2-8-0-release/
	$ make -f GNUmakefile "CROSS=$ARCH-" $BUILD_FLAG GC-inlined
	$ sudo cp *.dll /usr/$ARCH/pthreads/lib/
	$ sudo cp *.a /usr/$ARCH/lib/
	$ sudo cp pthread.h sched.h semaphore.h /usr/$ARCH/pthreads/include


MinGW regex library
^^^^^^^^^^^^^^^^^^^

You can compile it  using:
 
	$ wget http://netcologne.dl.sourceforge.net/project/mingw/Other/UserContributed/regex/mingw-regex-2.5.1/mingw-libgnurx-2.5.1-src.tar.gz
	$ tar -zxf mingw-libgnurx-2.5.1-src.tar.gz
	$ cd mingw-libgnurx-2.5.1
	$ ./configure --prefix=$PREFIX $HOST_FLAG
	$ make
	$ sudo make install

libtool (libltdl)
^^^^^^^^^^^^^^^^^

	$ wget https://ftpmirror.gnu.org/libtool/libtool-2.4.6.tar.gz
	$ tar xzf libtool-2.4.6.tar.gz
	$ cd libtool-2.4.6
	$ ./configure --prefix=$PREFIX $HOST_FLAG
	$ make
	$ sudo make install

libusb
^^^^^^

* libusb-1.0

	$ wget https://sourceforge.net/projects/libusb/files/libusb-1.0/libusb-1.0.26/libusb-1.0.26.tar.bz2
	$ tar xjf libusb-1.0.26.tar.bz2
	$ cd libusb-1.0.26
	$ ./configure --prefix=$PREFIX $HOST_FLAG
	$ make
	$ sudo make install

* libusb-compat-0.1 (API translation layer for older codebase, uses libusb-1.0)

	$ wget https://github.com/libusb/libusb-compat-0.1/archive/refs/heads/master.zip -O libusb-compat-0.1-master.zip
	$ unzip libusb-compat-0.1-master.zip
	$ cd libusb-compat-0.1-master
	$ ./bootstrap.sh
	$ PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig ./configure --prefix=$PREFIX $HOST_FLAG
	$ make
	$ sudo make install

net-snmp
^^^^^^^^

	$ wget https://sourceforge.net/projects/net-snmp/files/net-snmp/5.9.1/net-snmp-5.9.1.tar.gz
	$ tar xzf net-snmp-5.9.1.tar.gz
	$ cd net-snmp-5.9.1
	$ yes "" | PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig ./configure --prefix=$PREFIX $HOST_FLAG \
	    --with-default-snmp-version=3 --disable-agent --disable-daemon \
	    --with-sys-contact="" --with-sys-location="" --with-logfile=none \
	    --with-persistent-directory=/usr/$ARCH/var/net-snmp \
	    --disable-embedded-perl --without-perl-modules --disable-perl-cc-checks
	# NOTE: ./configure script may ask a few questions, or may just print
	# a banner that it would; hopefully all replies needed for current
	# version are covered above
	$ make
	$ sudo make install


Other requirements
^^^^^^^^^^^^^^^^^^

libneon (xml), gd (cgi), avahi, ipmi, ssl...

* https://github.com/libgd/libgd/releases/download/gd-2.3.3/libgd-2.3.3.tar.gz
* https://notroj.github.io/neon/neon-0.32.2.tar.gz
* https://github.com/lathiat/avahi/releases/download/v0.8/avahi-0.8.tar.gz

Building NUT
~~~~~~~~~~~~

Use the following to compile NUT with:

* an existing source tarball (can be fetched from NUT website):

	$ export SOURCEMODE=stable
	### Optionally: export VER_OPT=2.8.0
	$ cd scripts/Windows/
	$ ./build-mingw-nut.sh

* out-of-tree from git source (easier to iterate for development, so default):

	(cd scripts/Windows/ && ./build-mingw-nut.sh all64)

* To (re-)build from scratch with a dist tarball, e.g. testing how a stable
release would fare, starting from a git checkout, use this:

	$ ./autogen.sh && ./configure && make dist && \
	    (cd scripts/Windows/ && SOURCEMODE=dist ./build-mingw-nut.sh all64)

If everything goes fine, you will find a NUT installation tree in 'nut_install'
sub-directory. Note the script accepts some parameters e.g. for 32/64 bit build
targets.

NOTE: For other ways of building and packaging, it might make sense for
a packaged delivery to also `make install DESTDIR=.../nut_install` from
the sources of dependency projects built above, or at least to copy the
built `*.dll` files from `$PREFIX/bin` to `nut_install/bin`. For those
dependencies that are listed above, the script does this best-effort
activity (does not fail if some are missing, but running the programs
can fail later).
